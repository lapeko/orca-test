package vulnerability

import (
	"fmt"
	"github.com/lapeko/orca-test/internal/cloudparser"
)

func NewCalculator(cEnv *cloudparser.CloudEnvironment) Service {
	tm := buildThreadMap(cEnv)
	return &service{vmThreadsMap: tm}
}

func (vs *service) ScanVMThreads(targetId string) ([]string, error) {
	threads, ok := vs.vmThreadsMap[targetId]
	if !ok {
		return nil, fmt.Errorf("no VM found with provided id: %s", targetId)
	}
	return threads, nil
}

func buildThreadMap(cEnv *cloudparser.CloudEnvironment) map[string][]string {
	tagVMIdsMap := make(map[string][]string)
	for _, vm := range cEnv.VMs {
		for _, tag := range vm.Tags {
			tagVMIdsMap[tag] = append(tagVMIdsMap[tag], vm.VMID)
		}
	}

	destThreadSet := make(map[string]map[string]bool)
	for _, rule := range cEnv.FWRules {
		destinations, ok := tagVMIdsMap[rule.DestTag]
		if !ok {
			continue
		}

		sources, ok := tagVMIdsMap[rule.SourceTag]
		if !ok {
			continue
		}

		for _, dest := range destinations {
			if _, ok := destThreadSet[dest]; !ok {
				destThreadSet[dest] = make(map[string]bool)
			}

			for _, src := range sources {
				destThreadSet[dest][src] = true
			}
		}
	}

	destThreats := make(map[string][]string)
	for dest, threatSet := range destThreadSet {
		destThreats[dest] = convertSetToSliceWithoutSource(threatSet, dest)
	}

	return appendSaveVMs(destThreats, cEnv.VMs)
}

func convertSetToSliceWithoutSource(set map[string]bool, destVMId string) []string {
	slice := make([]string, 0, len(set))
	for key := range set {
		if key == destVMId {
			continue
		}
		slice = append(slice, key)
	}
	return slice
}

func appendSaveVMs(destThreats map[string][]string, vms []cloudparser.VirtualMachine) map[string][]string {
	for _, vm := range vms {
		if _, ok := destThreats[vm.VMID]; !ok {
			destThreats[vm.VMID] = []string{}
		}
	}
	return destThreats
}
