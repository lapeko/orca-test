package vulnerability

import (
	"github.com/lapeko/orca-test/internal/cloudparser"
)

func NewCalculator(cEnv *cloudparser.CloudEnvironment) Service {
	tm := buildThreadMap(cEnv)
	return &service{vmThreadsMap: tm}
}

func buildThreadMap(cEnv *cloudparser.CloudEnvironment) map[string][]string {
	tagVMIdMap := make(map[string][]string)
	for _, vm := range cEnv.VMs {
		for _, tag := range vm.Tags {
			tagVMIdMap[tag] = append(tagVMIdMap[tag], vm.VMID)
		}
	}

	destThreadSet := make(map[string]map[string]bool)
	for _, rule := range cEnv.FWRules {
		destinations, ok := tagVMIdMap[rule.DestTag]
		if !ok {
			continue
		}

		sources, ok := tagVMIdMap[rule.SourceTag]
		if !ok {
			continue
		}

		for _, dest := range destinations {
			if _, ok := destThreadSet[dest]; !ok {
				destThreadSet[dest] = make(map[string]bool)
			}

			for _, src := range sources {
				destThreadSet[dest][src] = true
			}
		}
	}

	destThreads := make(map[string][]string)
	for dest, threatSet := range destThreadSet {
		destThreads[dest] = convertSetToSliceWithoutSource(threatSet, dest)
	}

	return destThreads
}

func convertSetToSliceWithoutSource(set map[string]bool, destVMId string) []string {
	slice := make([]string, 0, len(set))
	for key := range set {
		if key == destVMId {
			continue
		}
		slice = append(slice, key)
	}
	return slice
}
